plot <- plot + ylab("PM2.5 Emissions (Tons)")
print(plot)
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Type, colour=Type))
plot <- plot + geom_line() + geom_point() + facet_grid(. ~ Type) + scale_x_discrete(breaks=plotData$year)
plot <- plot + ggtitle("PM2.5 Emissions for the City of Baltimore, Segregated by Source Type")
plot <- plot + ylab("PM2.5 Emissions (Tons)")
print(plot)
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Type, colour=Type))
plot <- plot + geom_line() + geom_point() + facet_grid(. ~ Type) #+ scale_x_discrete(breaks=plotData$year)
plot <- plot + ggtitle("PM2.5 Emissions for the City of Baltimore, Segregated by Source Type")
plot <- plot + ylab("PM2.5 Emissions (Tons)")
print(plot)
# Initialise graphics device.
png(filename = file.path(getwd(), "plot3.png"), width = 800, height = 400,
bg = "transparent")
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Type, colour=Type))
plot <- plot + geom_line() + geom_point() + facet_grid(. ~ Type)
plot <- plot + ggtitle("PM2.5 Emissions for the City of Baltimore, Segregated by Source Type")
plot <- plot + ylab("PM2.5 Emissions (Tons)")
print(plot)
# Write plot out to file.
dev.off()
# Grep for "coal combustion" related sources in SCC$Short.Name
sources <- SCC[grep("*Comb(.)*Coal*", SCC$Short.Name), 1]
# Subset NEI data based on whether or not the source is "coal combustion" related.
srcNEI <- subset(NEI, NEI$SCC %in% sources)
# Melt & recast PM2.5 data, summing by year.
mSrcNEI <- melt(srcNEI, id.vars = "year", measure.vars = "Emissions")
plotData <- dcast(mSrcNEI, year ~ variable, sum)
plotData$year <- factor(plotData$year)
plot <- ggplot(data=plotData, aes(x=year, y=Emissions, group=1))
plot <- plot + geom_line() + geom_point() + ggtitle("Coal Combustion Related PM2.5 Emissions Over Time in the City of Baltimore")
plot <- plot + xlab("Year") + ylab("PM2.5 Emissions (Tons)")
print(plot)
# Initialise graphics device.
png(filename = file.path(getwd(), "plot4.png"), width = 600, height = 600,
bg = "transparent")
plot <- ggplot(data=plotData, aes(x=year, y=Emissions, group=1))
plot <- plot + geom_line() + geom_point() + ggtitle("Coal Combustion Related PM2.5 Emissions Over Time in the City of Baltimore")
plot <- plot + xlab("Year") + ylab("PM2.5 Emissions (Tons)")
print(plot)
# Write plot out to file.
dev.off()
# Grep for "motor vehicle" related sources in SCC$EI.Sector
sources <- SCC[grep("*Motor*|*Vehicle*", SCC$EI.Sector), 1]
# Subset NEI data based on whether or not the source is "motor vehicle" related,
# and to those data relevant to Baltimore.
balSrcNEI <- subset(NEI, NEI$SCC %in% sources & fips == "24510")
# Melt & recast PM2.5 data, summing by year.
mBalSrcNEI <- melt(balSrcNEI, id.vars = "year", measure.vars = "Emissions")
plotData <- dcast(mBalSrcNEI, year ~ variable, sum)
plot <- ggplot(data=plotData, aes(x=year, y=Emissions, group=1))
plot <- plot + geom_line() + geom_point() + xlab("Year") + ylab("PM2.5 Emissions (Tons)")
plot <- plot + ggtitle("Motor Vehicle Related PM2.5 Emissions Over Time in the City of Baltimore")
print(plot)
# Grep for "motor vehicle" related sources in SCC$EI.Sector
sources <- SCC[grep("*Motor*|*Vehicle*", SCC$EI.Sector), 1]
# Subset NEI data based on whether or not the source is "motor vehicle" related,
# and to those data relevant to Baltimore & Los Angeles.
balSrcNEI <- subset(NEI, NEI$SCC %in% sources & fips == "24510")
lacSrcNEI <- subset(NEI, NEI$SCC %in% sources & fips == "06037")
# Melt & recast PM2.5 data, summing by year for Baltimore.
mBalSrcNEI <- melt(balSrcNEI, id.vars = c("year", "fips"), measure.vars = "Emissions")
balDat <- dcast(mBalSrcNEI, year + fips ~ variable, sum)
# Melt & recast PM2.5 data, summing by year for LA County.
mLacSrcNEI <- melt(lacSrcNEI, id.vars = c("year", "fips"), measure.vars = "Emissions")
lacDat <- dcast(mLacSrcNEI, year + fips ~ variable, sum)
# Get year-on-year change for Baltimore, replacing first (NA) value with zero.
balDat$Emissions <- Delt(balDat$Emissions)[1:4,]
balDat$Emissions[1] <- 0
# Get year-on-year change for LA County, replacing first (NA) value with zero.
lacDat$Emissions <- Delt(lacDat$Emissions)[1:4,]
lacDat$Emissions[1] <- 0
plotData <- rbind(balDat, lacDat) # Create 'long' dataset for ggplot.
plotData$Emissions <- plotData$Emissions * 100 # Convert to percentage changes.
names(plotData) <- c("Year", "Location", "Emissions")
plotData$fips <- factor(plotData$Location, levels = c("06037", "24510"),
labels = c("Los Angeles County", "Baltimore"))
# Initialise graphics device.
png(filename = file.path(getwd(), "plot6.png"), #width = 600, height = 600,
bg = "transparent")
# Create plot.
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Location, fill=Location, colour=Location))
plot <- plot + geom_bar(stat="identity", position="dodge") + scale_x_continuous(breaks=plotData$Year)
plot <- plot + ggtitle("Year-On-Year Relative Change In PM2.5 Emissions for Baltimore & Los Angeles County")
plot <- plot + ylab("Change in PM2.5 Emissions (%)")
print(plot)
# Write plot out to file.
dev.off()
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Location, fill=Location, colour=Location))
plot <- plot + geom_bar(stat="identity", position="dodge") + scale_x_continuous(breaks=plotData$Year)
plot <- plot + ggtitle("Year-On-Year Change In PM2.5 Emissions for Baltimore & Los Angeles County")
plot <- plot + ylab("Relative Change in PM2.5 Emissions (%)")
print(plot)
plotData$Location <- factor(plotData$Location, levels = c("06037", "24510"),
labels = c("Los Angeles County", "Baltimore"))
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Location, fill=Location, colour=Location))
plot <- plot + geom_bar(stat="identity", position="dodge") + scale_x_continuous(breaks=plotData$Year)
plot <- plot + ggtitle("Year-On-Year Change In PM2.5 Emissions for Baltimore & Los Angeles County")
plot <- plot + ylab("Relative Change in PM2.5 Emissions (%)")
print(plot)
# Initialise graphics device.
png(filename = file.path(getwd(), "plot6.png"), #width = 600, height = 600,
bg = "transparent")
# Create plot.
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Location, fill=Location, colour=Location))
plot <- plot + geom_bar(stat="identity", position="dodge") + scale_x_continuous(breaks=plotData$Year)
plot <- plot + ggtitle("Year-On-Year Change In PM2.5 Emissions for Baltimore & Los Angeles County")
plot <- plot + ylab("Relative Change in PM2.5 Emissions (%)")
print(plot)
# Write plot out to file.
dev.off()
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Location, fill=Location, colour=Location))
plot <- plot + geom_bar(stat="identity", position="dodge") + scale_x_continuous(breaks=plotData$Year)
plot <- plot + ggtitle("Year-On-Year Change In PM2.5 Emissions for \n Baltimore & Los Angeles County")
plot <- plot + ylab("Relative Change in PM2.5 Emissions (%)")
print(plot)
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Location, fill=Location, colour=Location))
plot <- plot + geom_bar(stat="identity", position="dodge") + scale_x_continuous(breaks=plotData$Year)
plot <- plot + ggtitle("Year-On-Year Change In PM2.5 Emissions:\nBaltimore & Los Angeles County")
plot <- plot + ylab("Relative Change in PM2.5 Emissions (%)")
print(plot)
plotData$Location <- factor(plotData$Location, levels = c("06037", "24510"),
labels = c("Los Angeles County", "City of Baltimore"))
# Initialise graphics device.
png(filename = file.path(getwd(), "plot6.png"), #width = 600, height = 600,
bg = "transparent")
# Create plot.
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Location, fill=Location, colour=Location))
plot <- plot + geom_bar(stat="identity", position="dodge") + scale_x_continuous(breaks=plotData$Year)
plot <- plot + ggtitle("Year-On-Year Change In PM2.5 Emissions:\nCity of Baltimore & Los Angeles County")
plot <- plot + ylab("Relative Change in PM2.5 Emissions (%)")
print(plot)
# Write plot out to file.
dev.off()
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Location, fill=Location, colour=Location))
plot <- plot + geom_bar(stat="identity", position="dodge") + scale_x_continuous(breaks=plotData$Year)
plot <- plot + ggtitle("Year-On-Year Change In PM2.5 Emissions:\nCity of Baltimore & Los Angeles County")
plot <- plot + ylab("Relative Change in PM2.5 Emissions (%)")
print(plot)
# Grep for "motor vehicle" related sources in SCC$EI.Sector
sources <- SCC[grep("*Motor*|*Vehicle*", SCC$EI.Sector), 1]
# Subset NEI data based on whether or not the source is "motor vehicle" related,
# and to those data relevant to Baltimore & Los Angeles.
balSrcNEI <- subset(NEI, NEI$SCC %in% sources & fips == "24510")
lacSrcNEI <- subset(NEI, NEI$SCC %in% sources & fips == "06037")
# Melt & recast PM2.5 data, summing by year for Baltimore.
mBalSrcNEI <- melt(balSrcNEI, id.vars = c("year", "fips"), measure.vars = "Emissions")
balDat <- dcast(mBalSrcNEI, year + fips ~ variable, sum)
# Melt & recast PM2.5 data, summing by year for LA County.
mLacSrcNEI <- melt(lacSrcNEI, id.vars = c("year", "fips"), measure.vars = "Emissions")
lacDat <- dcast(mLacSrcNEI, year + fips ~ variable, sum)
# Get year-on-year change for Baltimore, replacing first (NA) value with zero.
balDat$Emissions <- Delt(balDat$Emissions)[1:4,]
balDat$Emissions[1] <- 0
# Get year-on-year change for LA County, replacing first (NA) value with zero.
lacDat$Emissions <- Delt(lacDat$Emissions)[1:4,]
lacDat$Emissions[1] <- 0
plotData <- rbind(balDat, lacDat) # Create 'long' dataset for ggplot.
plotData$Emissions <- plotData$Emissions * 100 # Convert to percentage changes.
names(plotData) <- c("Year", "Location", "Emissions")
plotData$Location <- factor(plotData$Location, levels = c("06037", "24510"),
labels = c("Los Angeles County", "City of Baltimore"))
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Location, fill=Location, colour=Location))
plot <- plot + geom_bar(stat="identity", position="dodge") + scale_x_continuous(breaks=plotData$Year)
plot <- plot + ggtitle("Year-On-Year Change In PM2.5 Emissions:\nCity of Baltimore & Los Angeles County")
plot <- plot + ylab("Relative Change in PM2.5 Emissions (%)")
print(plot)
# Initialise graphics device.
png(filename = file.path(getwd(), "plot6.png"), #width = 600, height = 600,
bg = "transparent")
# Create plot.
plot <- ggplot(data=plotData, aes(x=Year, y=Emissions, group=Location, fill=Location, colour=Location))
plot <- plot + geom_bar(stat="identity", position="dodge") + scale_x_continuous(breaks=plotData$Year)
plot <- plot + ggtitle("Year-On-Year Change In PM2.5 Emissions:\nCity of Baltimore & Los Angeles County")
plot <- plot + ylab("Relative Change in PM2.5 Emissions (%)")
print(plot)
# Write plot out to file.
dev.off()
# Grep for "motor vehicle" related sources in SCC$EI.Sector
sources <- SCC[grep("*Motor*|*Vehicle*", SCC$EI.Sector), 1]
# Subset NEI data based on whether or not the source is "motor vehicle" related,
# and to those data relevant to Baltimore.
balSrcNEI <- subset(NEI, NEI$SCC %in% sources & fips == "24510")
# Melt & recast PM2.5 data, summing by year.
mBalSrcNEI <- melt(balSrcNEI, id.vars = "year", measure.vars = "Emissions")
plotData <- dcast(mBalSrcNEI, year ~ variable, sum)
# Initialise graphics device.
png(filename = file.path(getwd(), "plot5.png"), width = 600, height = 600,
bg = "transparent")
plot <- ggplot(data=plotData, aes(x=year, y=Emissions, group=1))
plot <- plot + geom_line() + geom_point() + xlab("Year") + ylab("PM2.5 Emissions (Tons)")
plot <- plot + ggtitle("Motor Vehicle Related PM2.5 Emissions Over Time in the City of Baltimore")
print(plot)
# Write plot out to file.
dev.off()
plot <- ggplot(data=plotData, aes(x=year, y=Emissions, group=1))
plot <- plot + geom_line() + geom_point() + xlab("Year") + ylab("PM2.5 Emissions (Tons)")
plot <- plot + ggtitle("Motor Vehicle Related PM2.5 Emissions Over Time in the City of Baltimore")
print(plot)
# Grep for "motor vehicle" related sources in SCC$EI.Sector
sources <- SCC[grep("*Motor*|*Vehicle*", SCC$EI.Sector), 1]
# Subset NEI data based on whether or not the source is "motor vehicle" related,
# and to those data relevant to Baltimore.
balSrcNEI <- subset(NEI, NEI$SCC %in% sources & fips == "24510")
# Melt & recast PM2.5 data, summing by year.
mBalSrcNEI <- melt(balSrcNEI, id.vars = "year", measure.vars = "Emissions")
plotData <- dcast(mBalSrcNEI, year ~ variable, sum)
plotData$year <- factor(plotData$year)
plot <- ggplot(data=plotData, aes(x=year, y=Emissions, group=1))
plot <- plot + geom_line() + geom_point() + xlab("Year") + ylab("PM2.5 Emissions (Tons)")
plot <- plot + ggtitle("Motor Vehicle Related PM2.5 Emissions Over Time in the City of Baltimore")
print(plot)
# Initialise graphics device.
png(filename = file.path(getwd(), "plot5.png"), width = 600, height = 600,
bg = "transparent")
plot <- ggplot(data=plotData, aes(x=year, y=Emissions, group=1))
plot <- plot + geom_line() + geom_point() + xlab("Year") + ylab("PM2.5 Emissions (Tons)")
plot <- plot + ggtitle("Motor Vehicle Related PM2.5 Emissions Over Time in the City of Baltimore")
print(plot)
# Write plot out to file.
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/coursera/represearch/RepData_PeerAssessment2")
source('~/.active-rstudio-document', echo=TRUE)
cleanData <- subset(cleanData, cleanData$EVTYPE %in% noaaEVTYPE)
unique(cleanData$EVTYPE)
Fatalities <- cleanData[, sum(FATALITIES), by = EVTYPE]
Injuries <- cleanData[, sum(INJURIES), by = EVTYPE]
x <- data.table(types, Fatalities$V1, Injuries$V1)
setnames(x, old=c("types", "V2", "V3"), new=c("EVTYPE", "Fatalities", "Injuries"))
x <- x[with(x, order(-Fatalities, -Injuries)),]
rankedLife <- head(x, 25)
moltenLife <- melt(rankedLife, id.vars="EVTYPE")
x <- data.table(cleanData$EVTYPE, Fatalities$V1, Injuries$V1)
setnames(x, old=c("types", "V2", "V3"), new=c("EVTYPE", "Fatalities", "Injuries"))
x <- x[with(x, order(-Fatalities, -Injuries)),]
Fatalities <- cleanData[, sum(FATALITIES), by = EVTYPE]
Injuries <- cleanData[, sum(INJURIES), by = EVTYPE]
x <- data.table(cleanData$EVTYPE, Fatalities$V1, Injuries$V1)
setnames(x, old=c("types", "V2", "V3"), new=c("EVTYPE", "Fatalities", "Injuries"))
x <- x[with(x, order(-Fatalities, -Injuries)),]
x <- data.table(unique(cleanData$EVTYPE), Fatalities$V1, Injuries$V1)
setnames(x, old=c("types", "V2", "V3"), new=c("EVTYPE", "Fatalities", "Injuries"))
x <- x[with(x, order(-Fatalities, -Injuries)),]
cleanData <- data.table(subset(srcData, FATALITIES > 0 | INJURIES > 0 | PROPDMG > 0 | CROPDMG > 0, select = c(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)))
cleanData$EVTYPE <- str_trim(cleanData$EVTYPE)
cleanData$EVTYPE[grepl("*astronomical low tide*", cleanData$EVTYPE)] <- "Astronomical Low Tide"
cleanData$EVTYPE[grepl("*avalanc(h)?e*", cleanData$EVTYPE)] <- "Avalanche"
cleanData$EVTYPE[grepl("*blizzard*", cleanData$EVTYPE)] <- "Blizzard"
cleanData$EVTYPE[grepl("*coastal flood*", cleanData$EVTYPE)] <- "Coastal Flood"
cleanData$EVTYPE[grepl("*cold/wind chill*", cleanData$EVTYPE)] <- "Cold/Wind Chill"
cleanData$EVTYPE[grepl("*debris flow*", cleanData$EVTYPE)] <- "Debris Flow"
cleanData$EVTYPE[grepl("*dense fog*", cleanData$EVTYPE)] <- "Dense Fog"
cleanData$EVTYPE[grepl("*dense smoke*", cleanData$EVTYPE)] <- "Dense Smoke"
cleanData$EVTYPE[grepl("*drought*", cleanData$EVTYPE)] <- "Drought"
cleanData$EVTYPE[grepl("*dust devil*", cleanData$EVTYPE)] <- "Dust Devil"
cleanData$EVTYPE[grepl("*dust storm*", cleanData$EVTYPE)] <- "Dust Storm"
cleanData$EVTYPE[grepl("*excessive heat*|*extreme heat*", cleanData$EVTYPE)] <- "Excessive Heat"
cleanData$EVTYPE[grepl("*extreme cold/wind chill*", cleanData$EVTYPE)] <- "Extreme Cold/Wind Chill"
cleanData$EVTYPE[grepl("*flash flood*|*flash/flood*|*flood/flash*|*flashflood*|*flood flash*", cleanData$EVTYPE)] <- "Flash Flood"
cleanData$EVTYPE[grepl("*lakeshore flood*", cleanData$EVTYPE)] <- "Lakeshore Flood"
cleanData$EVTYPE[grepl("*flood*", cleanData$EVTYPE)] <- "Flood"
cleanData$EVTYPE[grepl("*frost*|*frost/freeze*|*freeze*", cleanData$EVTYPE)] <- "Frost/Freeze"
cleanData$EVTYPE[grepl("*funnel cloud*", cleanData$EVTYPE)] <- "Funnel Cloud"
cleanData$EVTYPE[grepl("*freezing fog*", cleanData$EVTYPE)] <- "Freezing Fog"
cleanData$EVTYPE[grepl("*marine hail*", cleanData$EVTYPE)] <- "Marine Hail"
cleanData$EVTYPE[grepl("*hail*", cleanData$EVTYPE)] <- "Hail"
cleanData$EVTYPE[grepl("*heat*", cleanData$EVTYPE)] <- "Heat"
cleanData$EVTYPE[grepl("*heavy rain*", cleanData$EVTYPE)] <- "Heavy Rain"
cleanData$EVTYPE[grepl("*heavy snow*", cleanData$EVTYPE)] <- "Heavy Snow"
cleanData$EVTYPE[grepl("*high surf*", cleanData$EVTYPE)] <- "High Surf"
cleanData$EVTYPE[grepl("*marine high wind*", cleanData$EVTYPE)] <- "Marine High Wind"
cleanData$EVTYPE[grepl("*high wind*", cleanData$EVTYPE)] <- "High Wind"
cleanData$EVTYPE[grepl("*hurricane*", cleanData$EVTYPE)] <- "Hurricane (Typhoon)"
cleanData$EVTYPE[grepl("*ice storm*", cleanData$EVTYPE)] <- "Ice Storm"
cleanData$EVTYPE[grepl("*lake effect snow*", cleanData$EVTYPE)] <- "Lake-Effect Snow"
cleanData$EVTYPE[grepl("*lightning*", cleanData$EVTYPE)] <- "Lightning"
cleanData$EVTYPE[grepl("*marine strong wind*", cleanData$EVTYPE)] <- "Marine Strong Wind"
cleanData$EVTYPE[grepl("*marine thunderstorm wind*", cleanData$EVTYPE)] <- "Marine Thunderstorm Wind"
cleanData$EVTYPE[grepl("*rip current*", cleanData$EVTYPE)] <- "Rip Current"
cleanData$EVTYPE[grepl("*seiche*", cleanData$EVTYPE)] <- "Seiche"
cleanData$EVTYPE[grepl("*sleet*", cleanData$EVTYPE)] <- "Sleet"
cleanData$EVTYPE[grepl("*storm surge/tide*", cleanData$EVTYPE)] <- "Storm Surge/Tide"
cleanData$EVTYPE[grepl("*strong wind*", cleanData$EVTYPE)] <- "Strong Wind"
cleanData$EVTYPE[grepl("*thunde(e)?r(e)?storm*|*tstm*|*thunderstrom*", cleanData$EVTYPE)] <- "Thunderstorm Wind"
cleanData$EVTYPE[grepl("*torn(a)?do*", cleanData$EVTYPE)] <- "Tornado"
cleanData$EVTYPE[grepl("*tropical depression*", cleanData$EVTYPE)] <- "Tropical Depression"
cleanData$EVTYPE[grepl("*tropical storm*", cleanData$EVTYPE)] <- "Tropical Storm"
cleanData$EVTYPE[grepl("*tsunami*", cleanData$EVTYPE)] <- "Tsunami"
cleanData$EVTYPE[grepl("*volcanic ash*", cleanData$EVTYPE)] <- "Volcanic Ash"
cleanData$EVTYPE[grepl("*waterspout*", cleanData$EVTYPE)] <- "Waterspout"
cleanData$EVTYPE[grepl("*wildfire*", cleanData$EVTYPE)] <- "Wildfire"
cleanData$EVTYPE[grepl("*winter storm*", cleanData$EVTYPE)] <- "Winter Storm"
cleanData$EVTYPE[grepl("*winter weather*", cleanData$EVTYPE)] <- "Winter Weather"
types <- unique(cleanData$EVTYPE)
types[order(types)]
Fatalities <- cleanData[, sum(FATALITIES), by = EVTYPE]
Injuries <- cleanData[, sum(INJURIES), by = EVTYPE]
x <- data.table(types, Fatalities$V1, Injuries$V1)
setnames(x, old=c("types", "V2", "V3"), new=c("EVTYPE", "Fatalities", "Injuries"))
x <- x[with(x, order(-Fatalities, -Injuries)),]
rankedLife <- head(x, 25)
moltenLife <- melt(rankedLife, id.vars="EVTYPE")
cleanData$EVTYPE[grepl("*tropical storm*", cleanData$EVTYPE)] <- "Tropical Storm"
cleanData <- data.table(subset(srcData, FATALITIES > 0 | INJURIES > 0 | PROPDMG > 0 | CROPDMG > 0, select = c(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)))
cleanData$EVTYPE <- str_trim(cleanData$EVTYPE)
cleanData$EVTYPE[grepl("*astronomical low tide*", cleanData$EVTYPE)] <- "Astronomical Low Tide"
cleanData$EVTYPE[grepl("*avalanc(h)?e*", cleanData$EVTYPE)] <- "Avalanche"
cleanData$EVTYPE[grepl("*blizzard*", cleanData$EVTYPE)] <- "Blizzard"
cleanData$EVTYPE[grepl("*coastal flood*", cleanData$EVTYPE)] <- "Coastal Flood"
cleanData$EVTYPE[grepl("*cold/wind chill*", cleanData$EVTYPE)] <- "Cold/Wind Chill"
cleanData$EVTYPE[grepl("*debris flow*", cleanData$EVTYPE)] <- "Debris Flow"
cleanData$EVTYPE[grepl("*dense fog*", cleanData$EVTYPE)] <- "Dense Fog"
cleanData$EVTYPE[grepl("*dense smoke*", cleanData$EVTYPE)] <- "Dense Smoke"
cleanData$EVTYPE[grepl("*drought*", cleanData$EVTYPE)] <- "Drought"
cleanData$EVTYPE[grepl("*dust devil*", cleanData$EVTYPE)] <- "Dust Devil"
cleanData$EVTYPE[grepl("*dust storm*", cleanData$EVTYPE)] <- "Dust Storm"
cleanData$EVTYPE[grepl("*excessive heat*|*extreme heat*", cleanData$EVTYPE)] <- "Excessive Heat"
cleanData$EVTYPE[grepl("*extreme cold/wind chill*", cleanData$EVTYPE)] <- "Extreme Cold/Wind Chill"
cleanData$EVTYPE[grepl("*flash flood*|*flash/flood*|*flood/flash*|*flashflood*|*flood flash*", cleanData$EVTYPE)] <- "Flash Flood"
cleanData$EVTYPE[grepl("*lakeshore flood*", cleanData$EVTYPE)] <- "Lakeshore Flood"
cleanData$EVTYPE[grepl("*flood*", cleanData$EVTYPE)] <- "Flood"
cleanData$EVTYPE[grepl("*frost*|*frost/freeze*|*freeze*", cleanData$EVTYPE)] <- "Frost/Freeze"
cleanData$EVTYPE[grepl("*funnel cloud*", cleanData$EVTYPE)] <- "Funnel Cloud"
cleanData$EVTYPE[grepl("*freezing fog*", cleanData$EVTYPE)] <- "Freezing Fog"
cleanData$EVTYPE[grepl("*marine hail*", cleanData$EVTYPE)] <- "Marine Hail"
cleanData$EVTYPE[grepl("*hail*", cleanData$EVTYPE)] <- "Hail"
cleanData$EVTYPE[grepl("*heat*", cleanData$EVTYPE)] <- "Heat"
cleanData$EVTYPE[grepl("*heavy rain*", cleanData$EVTYPE)] <- "Heavy Rain"
cleanData$EVTYPE[grepl("*heavy snow*", cleanData$EVTYPE)] <- "Heavy Snow"
cleanData$EVTYPE[grepl("*high surf*", cleanData$EVTYPE)] <- "High Surf"
cleanData$EVTYPE[grepl("*marine high wind*", cleanData$EVTYPE)] <- "Marine High Wind"
cleanData$EVTYPE[grepl("*high wind*", cleanData$EVTYPE)] <- "High Wind"
cleanData$EVTYPE[grepl("*hurricane*", cleanData$EVTYPE)] <- "Hurricane (Typhoon)"
cleanData$EVTYPE[grepl("*ice storm*", cleanData$EVTYPE)] <- "Ice Storm"
cleanData$EVTYPE[grepl("*lake effect snow*", cleanData$EVTYPE)] <- "Lake-Effect Snow"
cleanData$EVTYPE[grepl("*lightning*", cleanData$EVTYPE)] <- "Lightning"
cleanData$EVTYPE[grepl("*marine strong wind*", cleanData$EVTYPE)] <- "Marine Strong Wind"
cleanData$EVTYPE[grepl("*marine thunderstorm wind*", cleanData$EVTYPE)] <- "Marine Thunderstorm Wind"
cleanData$EVTYPE[grepl("*rip current*", cleanData$EVTYPE)] <- "Rip Current"
cleanData$EVTYPE[grepl("*seiche*", cleanData$EVTYPE)] <- "Seiche"
cleanData$EVTYPE[grepl("*sleet*", cleanData$EVTYPE)] <- "Sleet"
cleanData$EVTYPE[grepl("*storm surge/tide*", cleanData$EVTYPE)] <- "Storm Surge/Tide"
cleanData$EVTYPE[grepl("*strong wind*", cleanData$EVTYPE)] <- "Strong Wind"
cleanData$EVTYPE[grepl("*thunde(e)?r(e)?storm*|*tstm*|*thunderstrom*", cleanData$EVTYPE)] <- "Thunderstorm Wind"
cleanData$EVTYPE[grepl("*torn(a)?do*", cleanData$EVTYPE)] <- "Tornado"
cleanData$EVTYPE[grepl("*tropical depression*", cleanData$EVTYPE)] <- "Tropical Depression"
cleanData$EVTYPE[grepl("*tropical storm*", cleanData$EVTYPE)] <- "Tropical Storm"
cleanData$EVTYPE[grepl("*tsunami*", cleanData$EVTYPE)] <- "Tsunami"
cleanData$EVTYPE[grepl("*volcanic ash*", cleanData$EVTYPE)] <- "Volcanic Ash"
cleanData$EVTYPE[grepl("*waterspout*", cleanData$EVTYPE)] <- "Waterspout"
cleanData$EVTYPE[grepl("*wildfire*|*wild/forest fire*|*bush fire*", cleanData$EVTYPE)] <- "Wildfire"
cleanData$EVTYPE[grepl("*winter storm*", cleanData$EVTYPE)] <- "Winter Storm"
cleanData$EVTYPE[grepl("*winter weather*", cleanData$EVTYPE)] <- "Winter Weather"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*wild( )?fire*|*wild/forest fire*|*bush fire*", cleanData$EVTYPE)] <- "Wildfire"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*wild( )?fire*|*wild/forest fire*|*brush fire*", cleanData$EVTYPE)] <- "Wildfire"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*wild( )?fire*|*wild/forest fire*|*brush fire*|*forest fire*", cleanData$EVTYPE)] <- "Wildfire"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*(dense )?fog*", cleanData$EVTYPE)] <- "Dense Fog"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*thu(n)?(d)?e(e)?r(e)?storm*|*tstm*|*thunderstrom*", cleanData$EVTYPE)] <- "Thunderstorm Wind"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*thu(n)?(d)?e(e)?r(e)?(s)?torm*|*tstm*|*thunderstrom*", cleanData$EVTYPE)] <- "Thunderstorm Wind"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*t(h)?u(n)?(d)?e(e)?r(e)?(s)?torm*|*tstm*|*thunderstrom*", cleanData$EVTYPE)] <- "Thunderstorm Wind"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*hurricane*|*typhoon*", cleanData$EVTYPE)] <- "Hurricane (Typhoon)"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*debris flow*|mud( )?slide*", cleanData$EVTYPE)] <- "Debris Flow"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*debris flow*|mud( )?slide*|*landslide*", cleanData$EVTYPE)] <- "Debris Flow"
cleanData$EVTYPE[grepl("*debris flow*|mud( )?slide*|*landslide*|*rock slide*", cleanData$EVTYPE)] <- "Debris Flow"
cleanData$EVTYPE[grepl("*lig(h)?t(n)?ing*", cleanData$EVTYPE)] <- "Lightning"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*high surf*|*high seas*|*high waves*|*high swells*", cleanData$EVTYPE)] <- "High Surf"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*storm surge(/tide)?*", cleanData$EVTYPE)] <- "Storm Surge/Tide"
cleanData$EVTYPE[grepl("*storm surge/tide*|*storm surge*", cleanData$EVTYPE)] <- "Storm Surge/Tide"
types <- unique(cleanData$EVTYPE)
types[order(types)]
cleanData$EVTYPE[grepl("*high surf*|*high seas*|*high waves*|*high swells*|*rough seas*|*rough surf*", cleanData$EVTYPE)] <- "High Surf"
types <- unique(cleanData$EVTYPE)
types[order(types)]
Fatalities <- cleanData[, sum(FATALITIES), by = EVTYPE]
Injuries <- cleanData[, sum(INJURIES), by = EVTYPE]
x <- data.table(types, Fatalities$V1, Injuries$V1)
setnames(x, old=c("types", "V2", "V3"), new=c("EVTYPE", "Fatalities", "Injuries"))
x <- x[with(x, order(-Fatalities, -Injuries)),]
rankedLife <- head(x, 25)
moltenLife <- melt(rankedLife, id.vars="EVTYPE")
subData <- subset(cleanData, PROPDMGEXP == "B" | CROPDMG == "B", select=c("EVTYPE", "PROPDMG", "CROPDMG"))
Property <- subData[, sum(PROPDMG), by = EVTYPE]
Crops <- subData[, sum(CROPDMG), by = EVTYPE]
y <- data.table(Property$EVTYPE, Property$V1, Crops$V1)
setnames(y, old=c("V1", "V2", "V3"), new=c("EVTYPE", "Property", "Crops"))
y <- y[with(y, order(-Property, -Crops)),]
rankedDmg <- head(y, 25)
moltenDmg <- melt(rankedDmg, id.vars="EVTYPE")
life <- ggplot(moltenLife, aes(x=reorder(EVTYPE, value), y=value, group=EVTYPE, fill=variable))
life <- life + geom_bar(stat = "identity") + coord_flip()
life <- life + ggtitle("Severe Weather Posing The Greatest Risk To Safety") +
ylab("Number of Fatalities/Injuries") + xlab("Type of Severe Weather")
print(life)
prop <- ggplot(moltenDmg, aes(x=reorder(EVTYPE, value), y=value, group=EVTYPE, fill=variable))
prop <- prop + geom_bar(stat = "identity") + coord_flip()
prop <- prop + ggtitle("Severe Weather Incurring The Greatest Economic Cost") +
ylab("Economic Cost - Billions of Dollars") + xlab("Type of Severe Weather")
print(prop)
prop <- ggplot(moltenDmg, aes(x=reorder(EVTYPE, value), y=value, group=EVTYPE, fill=variable))
prop <- prop + geom_bar(stat = "identity") + coord_flip() + scale_y_log10()
prop <- prop + ggtitle("Severe Weather Incurring The Greatest Economic Cost") +
ylab("Economic Cost - Billions of Dollars") + xlab("Type of Severe Weather")
print(prop)
prop <- ggplot(moltenDmg, aes(x=reorder(EVTYPE, value), y=value, group=EVTYPE, fill=variable))
prop <- prop + geom_bar(stat = "identity", position="stack") + coord_flip() + scale_y_log10()
prop <- prop + ggtitle("Severe Weather Incurring The Greatest Economic Cost") +
ylab("Economic Cost - Billions of Dollars") + xlab("Type of Severe Weather")
print(prop)
prop <- ggplot(moltenDmg, aes(x=reorder(EVTYPE, value), y=value, group=EVTYPE, fill=variable))
prop <- prop + geom_bar(stat = "identity") + coord_flip()
prop <- prop + ggtitle("Severe Weather Incurring The Greatest Economic Cost") +
ylab("Economic Cost - Billions of Dollars") + xlab("Type of Severe Weather")
print(prop)
rankedDmg
rankedLife <- head(x, 10)
moltenLife <- melt(rankedLife, id.vars="EVTYPE")
rankedDmg <- head(y, 10)
moltenDmg <- melt(rankedDmg, id.vars="EVTYPE")
life <- ggplot(moltenLife, aes(x=reorder(EVTYPE, value), y=value, group=EVTYPE, fill=variable))
life <- life + geom_bar(stat = "identity") + coord_flip()
life <- life + ggtitle("Severe Weather Posing The Greatest Risk To Safety") +
ylab("Number of Fatalities/Injuries") + xlab("Type of Severe Weather")
print(life)
prop <- ggplot(moltenDmg, aes(x=reorder(EVTYPE, value), y=value, group=EVTYPE, fill=variable))
prop <- prop + geom_bar(stat = "identity") + coord_flip()
prop <- prop + ggtitle("Severe Weather Incurring The Greatest Economic Cost") +
ylab("Economic Cost - Billions of Dollars") + xlab("Type of Severe Weather")
print(prop)
# The plot produced by this script aims to answer question 4:
# "Across the United States, how have emissions from coal combustion-related sources changed from 1999–2008?"
# We produce a line plot to address the question, subsetting the original data by SCC code.
# We make the assumption that all coal combustion related sources have values in the 'Short.Name'
# Field of the SCC data containing either 'coal' or 'comb', and extract these using regular expressions.
require(reshape2)
require(ggplot2)
# Read data in.
NEI <- readRDS(file.path(getwd(), "data", "summarySCC_PM25.rds"))
SCC <- readRDS(file.path(getwd(), "data", "Source_Classification_Code.rds"))
# Grep for "coal combustion" related sources in SCC$Short.Name
sources <- SCC[grep("*Comb(.)*Coal*", SCC$Short.Name), 1]
# Subset NEI data based on whether or not the source is "coal combustion" related.
srcNEI <- subset(NEI, NEI$SCC %in% sources)
# Melt & recast PM2.5 data, summing by year.
mSrcNEI <- melt(srcNEI, id.vars = "year", measure.vars = "Emissions")
plotData <- dcast(mSrcNEI, year ~ variable, sum)
# Tweak data for plotting.
plotData$year <- factor(plotData$year)
# Initialise graphics device.
png(filename = file.path(getwd(), "plot4.png"), width = 600, height = 600,
bg = "transparent")
plot <- ggplot(data=plotData, aes(x=year, y=Emissions, group=1))
plot <- plot + geom_line() + geom_point() + ggtitle("Coal Combustion Related PM2.5 Emissions Over Time in the United States")
plot <- plot + xlab("Year") + ylab("PM2.5 Emissions (Tons)")
print(plot)
# Write plot out to file.
dev.off()
setwd("~/coursera/eda/ExData_Plotting2")
# The plot produced by this script aims to answer question 4:
# "Across the United States, how have emissions from coal combustion-related sources changed from 1999–2008?"
# We produce a line plot to address the question, subsetting the original data by SCC code.
# We make the assumption that all coal combustion related sources have values in the 'Short.Name'
# Field of the SCC data containing either 'coal' or 'comb', and extract these using regular expressions.
require(reshape2)
require(ggplot2)
# Read data in.
NEI <- readRDS(file.path(getwd(), "data", "summarySCC_PM25.rds"))
SCC <- readRDS(file.path(getwd(), "data", "Source_Classification_Code.rds"))
# Grep for "coal combustion" related sources in SCC$Short.Name
sources <- SCC[grep("*Comb(.)*Coal*", SCC$Short.Name), 1]
# Subset NEI data based on whether or not the source is "coal combustion" related.
srcNEI <- subset(NEI, NEI$SCC %in% sources)
# Melt & recast PM2.5 data, summing by year.
mSrcNEI <- melt(srcNEI, id.vars = "year", measure.vars = "Emissions")
plotData <- dcast(mSrcNEI, year ~ variable, sum)
# Tweak data for plotting.
plotData$year <- factor(plotData$year)
# Initialise graphics device.
png(filename = file.path(getwd(), "plot4.png"), width = 600, height = 600,
bg = "transparent")
plot <- ggplot(data=plotData, aes(x=year, y=Emissions, group=1))
plot <- plot + geom_line() + geom_point() + ggtitle("Coal Combustion Related PM2.5 Emissions Over Time in the United States")
plot <- plot + xlab("Year") + ylab("PM2.5 Emissions (Tons)")
print(plot)
# Write plot out to file.
dev.off()
setwd("~/coursera/represearch/RepData_PeerAssessment2")
